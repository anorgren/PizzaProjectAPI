openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/acurt7/ThePizzaProject/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/aayushms93/ThePizzaProject/1.0.0
  - description: Heroku API
    url: https://infinite-wildwood-41499.herokuapp.com/aayushms93/ThePizzaProject/1.0.0
  - description: Andrew Heroku API
    url: https://arcane-river-43270.herokuapp.com/aayushms93/ThePizzaProject/1.0.0
info:
  description: These are the APIs for delivery at The Pizza Temple Restaurant
  version: "1.0.0"
  title: The Pizza Temple
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /stores:
    get:
      tags:
        - developers
      summary: returns all stores
      operationId: getStores
      description: |
        Get list of all stores
      responses:
        '200':
          description: list of all stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
  /stores/{id}:
    get:
      tags:
        - developers
      summary: get store by id
      operationId: getStoresById
      description: |
        Get store details by id
      parameters:
      - name: id
        in: path
        description: StoreId
        required: true
        schema:
          type: string
          example: 1
      responses:
        '200':
          description: Details of the store of the given Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
  /toppings:
    get:
      tags:
        - developers
      summary: returns all toppings
      operationId: getToppings
      description: |
        Get list of all toppings
      responses:
        '200':
          description: list of all toppings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topping'
        '400':
          description: bad input parameter
  /toppings/{name}:
    get:
      tags:
        - developers
      summary: returns topping information of the given topping
      operationId: getToppingsbyName
      description: |
        Get topping information of the given topping
      parameters:
        - name: name
          in: path
          description: toppingName
          required: true
          schema:
            type: string
            example: tomato
      responses:
        '200':
          description: topping information of the given topping
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Topping'
        '400':
          description: bad input parameter
  /sizes:
    get:
      tags:
        - developers
      summary: returns all pizza sizes
      operationId: getSizes
      description: |
        Get list of all pizza sizes
      responses:
        '200':
          description: list of all pizza sizes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaSize'
        '400':
          description: bad input parameter
  /specials:
    get:
      tags:
      - developers
      summary: returns list of specials in all stores
      operationId: getSpecials
      description: |
        get list of all specials for all stores
      responses:
        '200':
          description: 'list of all specials for all stores'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Special'
  /prices:
    get:
      tags:
        - developers
      summary: Returns the price of a single pizza sold by Pizza Temple in cents
      operationId: getPizzaPrice
      description: Get pricing information on pizzas sold by PizzaTemple
      parameters:
        - name: size
          in: query
          description: Size of pizza
          required: true
          schema:
            type: string
            example: small
        - name: toppings
          in: query
          description: Topping to include on pizza
          schema:
            type: array
            items:
             type: string
      responses:
        '200':
          description: The cost of the requested pizza in cents
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Price'
        '400':
          description: bad input parameter
  /suggestions:
    get:
      tags:
        - developers
      summary: Returns a suggested number of pizzas to order given the number of adults and children that will be enjoying it.
      operationId: getNumberOfPizzas
      description: Suggests how many pizzas to order based on the number of people in the ordering group.
      parameters:
        - name: adults
          in: query
          description: Number of adults
          required: true
          schema:
            type: integer
            example: 3
        - name: children
          in: query
          description: Number of children
          required: true
          schema:
            type: integer
            example: 2
        - name : preferredSize
          in: query
          description: The preferred size, if given all suggested pizzas will be this size. Must be a valid size (small, medium, large).
          schema:
            type: string
            example : small
      responses:
        '200':
          description: The number of small, medium, and large pizzas to order
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/PizzaSuggestion'
              
        '400':
          description: bad input parameter
components:
  schemas:
    Store:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 1
        branchName:
          type: string
          example: Fremont Branch
        address:
          type: string
          example: '101 Fremont Ave, Seattle, WA 12345'
        dietaryRestrictions:
          type: object
          additionalProperties:
            type: boolean
        availableToppings:
          type: array
          items:
            type: string
            example: tomato
        availableSizes:
          type: array
          items:
            $ref: '#/components/schemas/PizzaSize'
    Topping:
      type: object
      required:
      - toppingName
      properties:
        toppingName:
          type: string
          example: tomato
        dietaryProperties:
          type: object
          additionalProperties:
              type: boolean
        price:
          type: number
          example: 2.00
    DietaryProperty:
      type: string
      enum:
      - Vegetarian
      - Vegan
      - Gluten Free
    PizzaSize:
      type: object
      required:
      - sizeDescription
      - sizeInInches
      properties:
        sizeDescription:
          type: string
          example: large
        sizeInInches:
          type: integer
          example: 16
    AdvertisementType:
      type: string
      enum:
      - Special
      - Coupon
    Advertisement:
      type: object
      required:
      - advertisementType
      properties:
        advertisementType:
          $ref: '#/components/schemas/AdvertisementType'
        marketingContent:
          type: string
          example: 'Buy my pizza'
    PizzaSuggestion:
      type: object
      required:
      - small
      - medium
      - large
      properties:
        small:
          type: integer
          example: 2
        medium:
          type: integer
          example: 3
        large:
          type: integer
          example: 0
    Price:
      type: object
      required:
      - priceInCents
      properties:
        priceInCents:
          type: integer
          example: 1000
    Special:
      type: object
      required: 
      - specialId
      - description
      properties:
        specialId:
          type: string
          example: BOGO
        description:
          type: string
          example: Receive the cheapest item for free when you purchase two or more items.
          